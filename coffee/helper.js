// Generated by CoffeeScript 2.5.1
var child_process, configFile, editFile, fs, get, getConf, getData, isPlainObject, log, path, prompt, resolve, saveConf, util, yaml;

prompt = require('prompt');

yaml = require('js-yaml');

child_process = require('child_process');

fs = require('fs');

path = require('path');

util = require('util');

configFile = '../config.json';

resolve = function(fpath) {
  return path.resolve(__dirname, fpath);
};

isPlainObject = function(val) {
  return val && typeof val === 'object' && Object.getPrototypeOf(val === Object.prototype);
};

saveConf = function(data) {
  var err;
  if (isPlainObject(data)) {
    data = JSON.stringify(data, null, 2);
  }
  err = fs.writeFileSync(resolve(configFile), data, 'utf8');
  if (err) {
    return console.log('WRITE CONF ERROR', err);
  }
};

getConf = function() {
  var config;
  config = require(configFile);
  if (config.yaml) {
    return config;
  }
  return new Promise(function(res) {
    var schema, skip, yamlSchema;
    skip = {
      key: 'q',
      check: function(val) {
        return val.toLowerCase() === 'q';
      }
    };
    yamlSchema = {
      name: 'yaml',
      description: `请输入yaml文件路径('${skip.key}'跳过)`,
      message: '文件不存在!',
      confirm: function(val) {
        var fpath;
        if (skip.check(val)) {
          return true;
        }
        fpath = resolve(val);
        return fs.existsSync(fpath) && fs.statSync(fpath).isFile();
      }
    };
    schema = [yamlSchema];
    prompt.start();
    return prompt.get(schema, function(err, data) {
      if (err) {
        res(false);
        console.error(err);
        return;
      }
      if (skip.check(data.yaml)) {
        console.warn("请指定yaml文件所在路径:D");
        res(false);
        return;
      }
      saveConf(data);
      return res(data);
    });
  });
};

log = function(data) {
  if (isPlainObject(data) || Array.isArray(data)) {
    return console.log(util.inspect(data, {
      colors: true,
      depth: null
    }));
  } else {
    return console.log(data);
  }
};

getData = async function(keyPath) {
  var conf, data, e, yamlFile;
  conf = (await getConf());
  if (!conf) {
    return false;
  }
  yamlFile = resolve(conf.yaml);
  try {
    data = yaml.safeLoad(fs.readFileSync(yamlFile, 'utf8'));
    return get(data, keyPath);
  } catch (error) {
    e = error;
    return console.error('PARSE YAML ERR:', e);
  }
};

// just like _.get
get = function(data, keyPath = '', defval = void 0) {
  var keys, ret;
  if (!keyPath) {
    return data;
  }
  // data[i][j].name -> data.i.j.name
  keyPath = keyPath.replace(/\[/g, '.').replace(/\]/g, '');
  keys = keyPath.split('.');
  ret = data;
  while (keys.length) {
    if (!isPlainObject(ret) && !Array.isArray(ret)) {
      return defval;
    }
    ret = ret[keys.shift()];
  }
  return ret;
};

editFile = async function(type) {
  var conf, file, files, fpath;
  files = {
    config: configFile,
    code: resolve(__dirname, 'index.js'),
    data: null
  };
  file = files[type];
  if (type === 'data') {
    conf = (await getConf());
    if (!conf) {
      return false;
    }
    file = conf.yaml;
  }
  fpath = resolve(file);
  return child_process.exec(`code ${fpath}`, function(err, stdout) {
    if (err) {
      console.error('\r\n看起来没有安装vscode,或忘记设置path环境变量了喔!  \r\n');
      return console.error('OPEN FILE ERR:', err);
    }
    if (stdout) {
      return console.log(stdout);
    }
  });
};

module.exports = {
  saveConf: saveConf,
  getConf: getConf,
  getData: getData,
  editFile: editFile,
  log: log
};
